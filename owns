#!/usr/bin/env ruby
# Eventually we want to migrate this to lua or something smaller for
# embedded services.
# 
# TODO update the IP address if it's set to be dynamic
# TODO test for error, owns.yml sanity, etc.

require 'yaml'
require 'mustache'
require 'open3'
require 'net/https'

@cur_dir  = File.dirname(__FILE__)
@nsdc_bin = `whereis -b nsd-control | awk '{print $2}'`.strip

if @nsdc_bin.empty? then
  # try old bin name
  @nsdc_bin = `whereis -b nsdc | awk '{print $2}'`.strip
  raise 'Cannot find nsd-control/nsdc' if @nsdc_bin.empty?
end

class Zone < Mustache
  self.template_path = "#{File.dirname(__FILE__)}/templates"
end

class Nsd < Mustache
  self.template_path = "#{File.dirname(__FILE__)}/templates"
end

def run_process(line, message)
  puts message
  Open3::popen3(line) do |stdin, stdout, stderr|
    puts 'Output:'
    puts stdout.read.strip

    puts 'Errors:'
    puts stderr.read.strip
  end
end

def get_public_address
  Net::HTTP.get(URI('https://icanhazip.com'))
end

# Load data
owns_data = YAML.load_file("#{@cur_dir}/owns.yml")

puts 'Generating nsd.conf...'
File.open("#{@cur_dir}/nsd.conf", 'w') { |nsd_conf|
  nsd_conf.rewind
  nsd_conf.write(Nsd.render(owns_data))
}

# Create the zone directory
puts 'Creating zones directory...'
FileUtils.mkdir_p('zones')

# Lingering zone files can trick nsd into believing we still serve
# them...
puts 'Removing old zones...'
FileUtils.rm(Dir.glob('zones/*.zone'))

# Obtain public address if the field was left empty
owns_data['public_address'] = get_public_address if owns_data['public_address'].nil?

# Traverse all zones
owns_data['zones'].each do |zone_data|
# Merge with the general configuration, zone-specific info takes
# precedence
  zone_data = owns_data.merge(zone_data)

# If this zone is delegated to us, don't create a zone file so the
# transfer is forced
  next if not zone_data['authorities'].nil?

# Generate a serial from the current time
  zone_data['serial'] = Time.new.to_i

# Inform what we're doing
  puts "Generating #{zone_data['zone']} with serial #{zone_data['serial']}..."

# Write the zonefile!
  File.open("zones/#{zone_data['zone']}.zone", 'w') { |zone_file|
    zone_file.rewind
    zone_file.write(Zone.render(zone_data))
  }

end

run_process("nsd-checkconf #{@cur_dir}/nsd.conf", 'Checking configuration...')
run_process("#{@nsdc_bin} rebuild", 'Rebuilding zones...')
run_process("#{@nsdc_bin} stop", 'Stopping nsd...')
run_process("#{@nsdc_bin} start", 'Starting nsd...')
run_process("#{@nsdc_bin} notify", 'Notifying our presence...')
